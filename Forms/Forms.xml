<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Forms</name>
    <version>1.0.2412.33923</version>
    <fullname>Forms, Version=1.0.2412.33923, Culture=neutral, PublicKeyToken=null</fullname>
  </assembly>
  <members>
    <member name="T:ScopeIII.Forms.DirectoryTreeview">
      <summary>
 adapted from DirListBoxSample ex as found at 
 http://msdn.microsoft.com/vbasic/downloads/samples/default.aspx 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	3/23/2005	Created 
 </history></member>
    <member name="T:ScopeIII.Forms.TestFrmProgressBarBeginInvoke">
      <summary>
 
 http://msdn.microsoft.com/msdnmag/issues/03/02/Multithreading/ 
 
 
 ex of callback using EventHandler: 
 
 // Created on UI thread 
 private Label lblStatus; 
 ••• 
 // Doesn't run on UI thread 
 private void RunsOnWorkerThread() { 
     DoSomethingSlow(); 
     // Do UI update on UI thread 
     object[] pList = { this, System.EventArgs.Empty }; 
     lblStatus.BeginInvoke(new System.EventHandler(UpdateUI), pList); 
 } 
 ••• 
 // Code to be run back on the UI thread (using System.EventHandler signature so we don't need to define a new delegate type here) 
 private void UpdateUI(object o, System.EventArgs e) { 
     // Now OK - this method will be called via Control.Invoke, so we are allowed to do things to the UI. 
     lblStatus.Text = "Finished!"; 
 } 
 
 
 ex of wrapping calls: 
 
 public class MyForm : System.Windows.Forms.Form { 
     ... 
     public void ShowProgress(string msg, int percentDone) { 
         // Wrap the parameters in some EventArgs-derived custom class: 
         System.EventArgs e = new MyProgressEvents(msg, percentDone); 
         object[] pList = { this, e }; 
 
         // Invoke the method. This class is derived from Form, so we can just call BeginInvoke to get to the UI thread. 
         BeginInvoke(new MyProgressEventsHandler(UpdateUI), pList); 
     } 
 
     private delegate void MyProgressEventsHandler(object sender, MyProgressEvents e); 
 
     private void UpdateUI(object sender, MyProgressEvents e) { 
         lblStatus.Text = e.Msg; 
         myProgressControl.Value = e.PercentDone; 
     } 
 } 
 
 above ex including the InvokeRequired check to avoid unnecessarily creating another thread: 
 
 public void ShowProgress(string msg, int percentDone) { 
     if (InvokeRequired) { 
         // As before above 
         ••• 
     } else { 
         // We're already on the UI thread just call straight through. 
         UpdateUI(this, new MyProgressEvents(msg, 
             PercentDone)); 
     } 
 } 
 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	4/27/2006	Created 
 </history></member>
  </members>
</doc>
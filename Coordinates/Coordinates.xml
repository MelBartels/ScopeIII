<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Coordinates</name>
    <version>1.0.2412.33923</version>
    <fullname>Coordinates, Version=1.0.2412.33923, Culture=neutral, PublicKeyToken=null</fullname>
  </assembly>
  <members>
    <member name="M:ScopeIII.Coordinates.Time.CalcSidTGreenwichMean(System.DateTime,System.Double)">
      <summary>
 from Jean Meeus' Astronomical Algorithms, 2nd ed, chapter 12, pg 88, formula 12.4 
 </summary>
 <param name="dateTime" />
 <param name="UtcOffsetHrs" />
 <returns />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/24/2005	Created 
 </history></member>
    <member name="M:ScopeIII.Coordinates.Time.CalcSidTNow">
      <summary>
 timer tick interval is 1/100 sec 
 </summary>
 <returns />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/24/2005	Created 
 </history></member>
    <member name="T:ScopeIII.Coordinates.CoordExpBase">
      <summary>
 Base class for all ICoordExp. 
 Incorporates common functionality. 
 
 Signs 
 output sign at front, ie, -00:34:56 
 can read - 00:34:56 and -00:34:56 and 00:-34:56 
 + sign always included for Dec, never included for HMS/HMSM 
 
 LX200 
 DMS formatting: -12^34#   where ^ stands for the degree symbol 
     long format -12^34:56# 
 must use leading zeroes - no blanks, ie, 02^34# is correct while _2^34# will fail 
 if no sign, then use 3 digits for degree value (ie, longitude) 
 HMS formatting: 12:34.5# 
     long format 12:34:56# 
 must use leading zeroes - no blanks, ie, 02:34.5# is correct while _2:34.5# will fail 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/19/2005	Created 
 </history></member>
    <member name="M:ScopeIII.Coordinates.CoordinateParser.Parse(System.String)">
      <summary>
 variants: 
 degree, eg, 123.456 
 datafile HMS, eg, 05 14 45 
 datafile DMS, eg, -08 11 48 
 radians, eg, 1.23456 
 DMS, eg, -08:11:48 
 HMS, eg, 05:14:45 
 HMSM, eg, 05:06:17.045 
 LX200 signed long deg, eg, "-10^05:02#" (^ stands in for the LX200 degree symbol) 
 LX200 signed short deg, eg, "-10^05.5#" (^ stands in for the LX200 degree symbol) 
 LX200 long deg, eg, "010^05:02#" (^ stands in for the LX200 degree symbol) 
 LX200 short deg, eg, "010^05.5#" (^ stands in for the LX200 degree symbol) 
 LX200 long hr, eg, "05:06:17#" 
 LX200 short hr, eg, "05:06#" 
 RA XML, eg, <RightAscension><Sign>+</Sign><Hours>5</Hours><Minutes>6</Minutes><Seconds>16.9999999999989</Seconds></RightAscension>
 Dec XML, eg, <Declination><Sign>+</Sign><Degrees>10</Degrees><Minutes>5</Minutes><Seconds>2</Seconds></Declination>
 
 DMS can also be in form of 1[d] 2[m] 3[s] 
 where [d] is optional: d, deg, degree, degrees 
 where [m] is optional: m, min, mins, minute, minutes 
 where [s] is optional: s, sec, secs, second, seconds 
 eg, 1d 2m 3s, or 1 deg 2 min 3 sec 
 therefore delimiter list: ' ', ':', 'd', 'm', 's' 
 
 HMS can also be in form of 1[h] 2[m] 3[s] 
 where [h] is optional: h, hr, hrs, hour, hours 
 where [m] is optional: m, min, mins, minute, minutes 
 where [s] is optional: s, sec, secs, second, seconds 
 eg, 1h 2m 3s, or 1 hr 2 min 3 sec 
 therefore delimiter list: ' ', ':', 'h', 'm', 's' 
 
 ambiguities: 
 degrees and radians if delimiter is 'r' 
 DMS and HMS where delimiter is ' ', or ':' 
 
 conclusion: 
 if at least 'h' present, then decode to HMS ('h' can be anywhere in the string, even at the end) 
 if at least 'd' present, or more than 1 number, then decode to DMS 
 if at least 'ra' present, then decode to radians 
 else default to decoding to degrees 
 
 </summary>
 <param name="str" />
 <returns />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	4/18/2005	Created 
 </history></member>
    <member name="T:ScopeIII.Coordinates.AltOffset">
      <summary>
 Offset measured as the amount to add to altitude to arrive at the true value. 
 If offset is -1, then altitude is 1 too high. 
 
 Input parameters required: 2 positions each with altaz and equat coordinates.  No CoordXform is needed. 
 
 Independent of coordinate transform method. 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	3/2/2005	Created 
 </history></member>
    <member name="M:ScopeIII.Coordinates.AltOffset.CalcAltOffsetDirectly(ScopeIII.Coordinates.Position@,ScopeIII.Coordinates.Position@)">
      <summary>
 angular separation of two equatorial coordinates should = the angular separation of the corresponding altazimuth coordinates; 
 for target altitudes that cross the equator of their coordinate system, there are two solutions 
 formula from Dave Ek <member name="M:ScopeIII.Coordinates.AltOffset.CalcAltOffsetIteratively(ScopeIII.Coordinates.Position@,ScopeIII.Coordinates.Position@)"><summary>
 when angular separation of altaz values closest to that of equat values, best altitude offset found 
 work with copy of Positions as .alt values changed 
 +- 45 deg range 
 </summary>
 <param name="a" />
 <param name="z" />
 <remarks>
 </remarks>
 <history>
 	[mbartels]	2/28/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.BestZ123"><summary>
 compute mount misalignment errors z1, z2, z3 using iterative search; 
 best values picked by mean square of resulting altitude and azimuth errors: that is, find best values of z123 that, 
 after plugging in z123 values, minimize altitude and azimuth errors (azimuth error corrected for cos of altitude); 
 search for z3 outside of search for z12 because including z3 creates multiple local minima that can only be found with brute force 
 or optimization such as annealing; 
 z12 range is +- 7 deg; 
 critically important to separate z1 z2 cleanly by determining accurate azimuths for series of altitudes between 10 and 80 deg; 
 routine run time is 3 sec on 2ghz machine in debug, 6 sec running Java from DOS prompt (similar code compiled in C and 
 run in DOS completes 10x faster); 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	3/8/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.CelestialCoordinateCalcs"><summary>
 from Jean Meeus' Astronomical Formulae for Calculators second edition, 1982, revised per later editions; 
 
 angular separation methods: two to calculate the angular separation of equatorial coordinates, two 
 to calculate the angular separation of altazimuth coordinates, and the final to calculate the difference 
 between the equatorial and azimuth angular separations 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	2/28/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.NutationAnnualAberration"><summary>
 from Jean Meeus' Astronomical Formulae for Calculators second edition, 1982, pg 69-70, revised per later editions; 
 
 Nutation: 
 nutation is variation or fluctuation in rate of precession; 
 caused by difference between ecliptic and earth-moon plane, the latter which precesses 18.6 years; 
 thus, plane of the moon's orbit and the effect of the moon's pull on the earth varies, causing 
 fluctuations in the rate of precession; 
 
 AnnualAberration: 
 starlight seems to come from a different direction than if earth at rest: this effect is called annual aberration; 
 diurnal aberration is due to earth's daily rotation and is of .3" value so will be ignored 
 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	5/28/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.Precession"><summary>
 
 from http://www.seds.org/~spider/spider/ScholarX/coord_ch.html 
 The star with the largest observed proper motion is 9.7 mag Barnard's Star in Ophiuchus with 10.27 "/y (arc seconds per year). 
 According to F. Schmeidler, only about 500 stars are known to have proper motions of more than 1 "/y. 
 
 from http://www.seds.org/~spider/spider/ScholarX/coord_ch.html#precession 
 low precision but quick processing routine for precession 
 high precision routine from Meeus 
 
 Precession of the Earth's polar axis is caused by the gravitational pull of the Sun and the Moon on the equatorial 
 bulge of the flattened rotating Earth. It makes the polar axis precess around the pole of the ecliptic, 
 with a period of 25,725 years (the so-called Platonic year). 
 The effect is large enough for changing the equatorial coordinate system significantly in comparatively short times 
 (therefore, Hipparchus was able to discover it around 130 B.C.). 
 Sun and moon together give rise to the lunisolar precession p0, while the other planets contribute the 
 significantly smaller planetary precession p1, which sum up to the general precession p 
 numerical values for these quantities are (from Schmeidler t is the time in tropical years from 2000.0): 
 p0 =  50.3878" + 0.000049" * t 
 p1 = - 0.1055" + 0.000189" * t 
 p  =  50.2910" + 0.000222" * t 
 
 These values give the annual increase of ecliptical longitude for all stars. 
 The effect on equatorial coordinates is formally more complicated, and approximately given by 
 p_RA  = m + n * sin RA * tan Dec 
 p_Dec = n * cos RA 
 (my note: p_... is per year) 
 where the constants m and n are the precession components given by 
 m = + 46.124" + 0.000279" * t 
   =   3.0749 s + 0.0000186 s * t 
 n = + 20.043" - 0.000085" * t 
   =   1.3362s - 0.0000056 s * t 
 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	3/27/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.ICoordExp"><summary>
 Interface for all coordinate expressions. 
 See 'formatting for different cultures' where: 
 Dim ci As CultureInfo = New CultureInfo("de-DE") 
 formatting on the spot can be changed: num.ToString("d", ci) 
 threads can be changed: Thread.CurrentThread.CurrentCulture = New CultureInfo("fr-BE") : num.ToString("d") 
 </summary>
 <param name="Rad" />
 <returns />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/19/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.FabErrors"><summary>
 fabrication errors (in radians): 
 Z1: offset of elevation to perpendicular of horizon, ie, one side of rocker box higher than the other 
 Z2: optical axis pointing error in same plane, ie, tube horiz.: optical axis error left to right (horiz) 
 Z3: correction to zero setting of elevation, ie, vertical offset error (same as altitude offset) 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/26/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.MeridianFlip"><summary>
 meridianFlip: 
 
 if scope is on east side of pier facing west, then flip is defined as 'off' such that no coordinate 
 ranslation need be done 
 if scope is on west side of pier facing east, then flip is active 
 
 if mount is flipped across meridian, then flipped ra differs from original setting circle 
 ra by 12 hrs altitude reading is mirrored across the pole, that is, an alt of 80 is actually 100 
 (mirrored across 90) as read from the original setting circle orientation 
 ie, 
 northern hemisphere (az increases as scope tracks, az=0 when on meridian): 
 not flipped: 
 	1 hr west of meridian (ra <member name="T:ScopeIII.Coordinates.Refract"><summary>
 refraction makes an object appear higher in the sky than it really is when close to the horizon; 
 if scope aimed at horizon, then it will actually be seeing an object -34.5' below horizon; 
 translate scope-&gt;sky as 0 -&gt; -34.5 and sky-&gt;scope as -34.5 -&gt; 0 
 causes tracking rate to slow down the closer the scope is to the horizon; 
 
 interpolate: 
 1. find points that the angle fits between 
    ex: angle of 10 has end point of r(10,0) and beginning point of r(9,0) 
 2. get position between end points 
    position = (a-bp)/(ep-bp) 
    ex: a=1, bp=2, ep=0 
        position = (1-2)/(0-2) = .5 
 3. scope-&gt;sky refraction = amount of refraction at beginning point + 
                            position (amount of refract at end point - amount of refract at beg point) 
    r = br + p*(er-br), r = br + (a-bp)/(ep-bp)*(er-br), r = br + (a-bp)*(er-br)/(ep-bp) 
    ex: br=18, er=34.5 
        r = 18 + .5*(34.5-18) = 26.25 arcmin 
 4. corrected angle = angle - refraction 
    ex: c = a-r = c = 60 arcmin - 26.25 arcmin = 33.75 arcmin 
 
 to reverse (sky-&gt;scope): have corrected angle of c, find altitude of a; 
    ex: c = 60 arcmin - 26.25 arcmin = 33.75 arcmin, solve for a: 
 1. c = a - r, a = c + r, a = (c+br)(ep-bp) + (a-bp)*(er-br)/(ep-bp), 
    a(ep-bp) = c*ep - c*bp + br*ep - br*bp + a*er - a*br - bp*er + bp*br, 
    a*ep - a*bp - a*er + a*br = c*ep - c*bp + br*ep - br*bp - bp*er + bp*br, 
    a*(ep-bp-er+br) = bp(-c-br-er+br) + ep(c+br), 
    a = (bp(-c-er) + ep(c+br)) / (ep-bp-er+br), 
    ex: using example from above, convert all units to armin... 
        c=33.75 arcmin 
        br=18 
        er=34.5 
        bp=120 
        ep=0 
    a = (120(-33.75-34.5) + 0) / (0-120-34.5+18), 
    a = 120*-68.25 / -136.5, 
    a = 60 armin 
 
 (if refract added to angle, eg, corrected angle = angle + refraction, ie, c=a+r, 
  then use the following to back out the correction: 
  to reverse: have corrected angle of ca, find altitude of a 
     ex: ca = 1deg + 26.25arcmin = 86.25arcmin, solve for a 
  1. ca = a + r, a = ca - r, a = ca - br - (a-bp)*(er-br)/(ep-bp), 
     a*(ep-bp)+(a-bp)*(er-br) = (ca-br)*(ep-bp), 
     a*ep-a*bp+a*er-a*br-bp*er+bp*br = ca*ep-ca*bp-br*ep+br*bp, 
     a*(ep-bp+er-br) = ca*ep-ca*bp-br*ep+br*bp+bp*er-bp*br, 
     a*(ep-bp+er-br) = ca*(ep-bp)-br*ep+bp*er, 
     a = (ca*(ep-bp)-br*ep+bp*er) / (ep-bp+er-br), 
     ex: convert all units to armin... 
         a = 86.25-18-(34.5-18)(60-120)/(0-120) = 86.25-18-8.25 = 60 (from 1st line) 
         a = (86.25*(0-120)-18*0+120*34.5)/(0-120+34.5-18) = (-10350+4140)/(-103.5) = 60) 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/18/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.Refract.CalcRefractScopeToSky(System.Double)"><summary>
 This function calcs refraction at _a particular aimed altitude, or translate scope-&gt;sky coordinates 
 ie, at the horizon, refraction will be 34.5 arcmin, resulting in _a lower aimed at sky coordinate. 
 </summary>
 <param name="alt" />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/18/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.Refract.CalcRefractSkyToScope(System.Double)"><summary>
 This function calcs refraction to remove from an already compensated altitude, eg translate sky-&gt;scope coordinates 
 ie, at 34.5 arcmin below horizon, value to remove is 34.5 arcmin, resulting in _a higher scope coordinate 
 </summary>
 <param name="alt" />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/18/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.Refract.setWorkVars(System.Double)"><summary>
 Utility function called by CalcRefract...() functions. 
 </summary>
 <param name="alt" />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/18/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.MotionVector"><summary>
 A motion vector and methods of manipulation. 
 
 ********* 
 
 analysis of motion and trajectories with the goal of exploring the issues and deriving formulae to smoothly 
 move from one trajectory to another 
 
 x=distance, 
 x1=accel distance, 
 x2=deccel distance, 
 z=total of accel+decel distances 
 a=acceleration, 
 b=beginning velocity, 
 f=final velocity, 
 m=maximum velocity, 
 v=average velocity, 
 t=time 
 
 ********* 
 
 solving for m, assuming constant acceleration, shortest time for move, with no limit on maximum velocity--- 
 
 given z=vt   v=(b+f)/2   f=b+at 
 (sub for v) z=t(b+f)/2, (sub for f) z=t(b+b+at)/2, z=bt+at^2/2 
 using z=bt+at^2/2, (sub for t where t=(f-b)/a) x1=b(f-b)/a+a(f-b)^2/2a^2 
 z1 goes from b to m velocities: b(m-b)/a+(m-b)^2/2a, z1=(2b(m-b)+(m-b)^2)/2a 
 z2 goes from m to f velocities and has -a: z2=m(f-m)/-a+-a(f-m)^2/(2*-a^2), z2=(-2m(f-m)-(f-m)^2)/2a 
 z=z1+z2: z=(2b(m-b)+(m-b)^2)/2a + (-2m(f-m)-(f-m)^2)/2a, 
 2az=2bm-2b^2+m^2-2mb+b^2 + -2mf+2m^2-f^2+2fm-m^2 
 2az= -b^2 +2m^2 -f^2 +0bm +0bf +0mf 
 2az=2m^2-b^2-f^2 
 solving for m: 2m^2=2az+b^2+f^2, m^2=az+b^2/2+f^2/2, 
 &gt;&gt;&gt; m=+-sqr(az+b^2/2+f^2/2), where az should always be positive 
 
 m always positive number, regardless of beg vel or final vel or accel, ie: 
 example: a=2, b=1, f=-1, m=5; a(ccel) portion: t=2, avg vel=3, z1=6; d(eccel) portion: t=3, avg vel=2, z2=6; z=12 
         sqrt(2*12+1/2+1/2)=5; 
          here because z1 and z2 are same, this shows that b and f can be + or - 
 
 rearranging to solve for a--- 
 &gt;&gt;&gt; a=(2m^2-b^2-f^2)/2z 
 
 taking into account the distance traveled while the move is in progress (constant final velocity, 
 no limit on max velocity)--- 
 
 t = t1 + t2 = (m-b)/a + (m-f)/a, t = (2m-b-f)/a; rearranging, m=(at+b+f)/2 
 recalling that m^2=az+b^2/2+f^2/2 
 noting that z increases by ft (final velocity*time) 
 m^2=a(z+ft)+b^2/2+f^2/2 
 
 since time is unknown--- 
 sub for t: m^2=a(z+f(2m-b-f)/a)+b^2/2+f^2/2 
 solve for m: m^2=az+2mf-bf-f^2+b^2/2+f^2/2, m^2-2mf=az-bf+b^2/2+f^2/2-f^2, 
 (m-f)^2=az-bf+b^2/2+f^2/2-f^2+f^2, 
 &gt;&gt;&gt; m=+-sqrt(az-bf+b^2/2+f^2/2)+f 
 
 example: a=2, b=1, f=-1, z=17 (net distance traveled or separation between two Positions) 
          m=+-sqrt(34+1+1/2+1/2)-1=5 
          first leg time=(5-1)/2=2, distance=2*(5+1)/2=6 
          last leg time=(5--1)/2=3, distance=3*(5+-1)/2=6 
          total distance=6(first leg)+6(second leg)--5(distance target moved during time)=17 
          and 
          a=2, b=1, f=1, z=8 (net distance traveled or separation between two Positions) 
          m=+-sqrt(16-1+1/2+1/2)+1=5 
          first leg time=(5-1)/2=2, distance=2*(5+1)/2=6 
          last leg time=(5-1)/2=2, distance=2*(5+1)/2=6 
          total distance=6(first leg)+6(second leg)-4(distance target moved during time)=8 
 
 &gt;&gt;&gt; and solving for a: a=((m-f)^2+bf-b^2/2-f^2/2)/z 
 
 if max vel was capped--- 
 scope will take longer than expected to reach position thus scope will move further thanks to this longer 
 period of time, so the scope should spend more time at max velocity by the amount: 
 b=begVel, t=time, z=initial distance, f=finalVel; bt=z+ft, 
 &gt;&gt;&gt; t=z/(b-f) 
 b=begVel, t=time, z=final distance, f=finalVel; z=bt, 
 &gt;&gt;&gt; t=z/b 
 
 ex: if initial separation is 6, maxvel = 5, finalVel = 2: increase in time = 6/(5-2) = 2 
     during time of 2, maxvel moves 10 and finalVel moves 4 + the original 6 = 10 
     and 
     if final separation is 10, maxvel = 5, finalVel = 2: increase in time = 10/5 = 2 
 
 if t = time while max vel capped--- 
 rearranging 2az=2m^2-b^2-f^2 to solve for z and adding distance while max vel capped: 
 z=(2m^2-b^2-f^2)/2a + mt, 
 &gt;&gt;&gt; m=(sqrt(4az+2b^2+2f^2+a^2t^2)-at)/2 
 
 ********* 
 
 solving for m, assuming constant acceleration, shortest time for move, no limit on maximum velocity 
 and first position/trajectory ends with zero velocity when coinciding or overlapping with second 
 position/trajectory that continues to move at a final velocity --- 
 
 from above--- 
 m=+-sqr(az+b^2/2+f^2/2), where az should always be positive 
 setting f=0 
 &gt;&gt;&gt; m=+-sqr(az-b^2/2), where az should always be positive 
 example: a=2, b=1, z=12.25 (1st leg=6, 2nd leg=6.25):m=5 
 rearranging to solve for a--- 
 &gt;&gt;&gt; a=(2m^2-b^2)/2z 
 
 taking into account the distance traveled while the move is in progress (constant final velocity, 
 no limit on max velocity)--- 
 
 t = t1 + t2 = (m-b)/a + m/a, t = (2m-b)/a; rearranging, m=(at+b)/2 
 recalling that m^2=az+b^2/2 
 noting that z increases by ft (final velocity*time) 
 m^2=a(z+ft)+b^2/2 
 example: a=2, b=1, f=-1, t=4.5, z=16.75 (1st leg=6, 2nd leg=6.25, z increase=4.5): m^2=2(16.75-4.5)+.5, m=5 
 
 since time is unknown--- 
 sub for t: m^2=a(z+f(2m-b)/a)+b^2/2 
 solve for m: m^2=az+2mf-bf+b^2/2, m^2-2mf=az-bf+b^2/2, 
 (m-f)^2=az-bf+b^2/2+f^2, 
 &gt;&gt;&gt; m=+-sqrt(az-bf+b^2/2+f^2)+f 
 example: a=2, b=1, f=-1, z=16.75 (net distance traveled or separation between two Positions) 
          m=+-sqrt(33.5+1+1/2+1)-1=5 
          first leg time=(5-1)/2=2, distance=2*(5+1)/2=6 
          last leg time=5/2=2.5, distance=2.5*2.5=6.25 
          total distance=6(first leg)+6.25(second leg)--4.5(distance target moved during time)=16.75 
 
 ********* 
 
 if time, distance known (maxvel, accel not known): 
 equations from above: x=bt+at^2/2, a=2x/t^2-2b/t and a=(f-b)/t 
 
 break move into two parts so as to start with beg vel, reach a middle vel, and end with a final vel--- 
 
 assume constant accel over both parts--- 
 (does NOT take into account the distance traveled while the move on) 
 using constant accel, therefore ratio of time for first part to time of last part: 
 t1/t2 = (m-b)/(m-f) and t2/t1=(m-f)/(m-b) 
 t=t1+t2, t1=t-t2, t1=t-t1(m-f)/(m-b), t1=((m-b)t-(m-f)t1)/(m-b), t1(m-b)+t1(m-f)=(m-b)t, t1=t(m-b)/(2m-f-b) 
 and t2=t-t1, t2=t-t2(m-b)/(m-f), t2=((m-f)t-(m-b)t2)/(m-f), t2(m-f)+t2(m-b)=(m-f)t, t2=t(m-f)/(2m-f-b) 
 z=z1+z1, z=(m+b)/2*t1+(m+f)/2*t2 
 sub for t1 and t2: z=t(m+b)(m-b)/2(2m-f-b) + t(m+f)(m-f)/2(2m-f-b), 
 z=t(2m^2-b^2-f^2)/(4m-2f-2b) 
 solving for m: 
 2z(2m-f-b)=t(2m^2-b^2-f^2), 2tm^2-4mz=tb^2+tf^2-2zb-2zf, m^2-m(4z/2t)=b^2/2+f^2/2-(b+f)(z/t), 
 (m-z/t)^2=b^2/2+f^2/2-(b+f)(z/t)+(z/t)^2, 
 &gt;&gt;&gt; m=+-sqrt(b^2/2+f^2/2-(b+f)(z/t)+(z/t)^2) + z/t 
 
 example:b=2, f=4, m=6, a=1: t1=4, t2=2; z=4(2+6)/2 + 2(6+4)/2=26 
 m=sqrt(4/2 + 16/2 - 6*26/6 + (26/6)^2) + 26/6 = sqrt(10 - 26 + 18.78) + 4.33 = 1.67 + 4.33 = 6 
 example:b=1, f=-1, m=5, a=2: t1=2, t2=3;z=2(1+5)/2 + 3(5+-1)/2=12 
 m=sqrt(1/2 + 1/2 - 0 + (12/5)^2) + 12/5 = sqrt(1 - 0 + 5.76) + 2.4 = 2.6 + 2.4 = 5 
 
 taking into account the distance traveled while the move is in progress--- 
 noting that z increases by ft (final velocity*time) 
 net z = z+ft 
 &gt;&gt;&gt; m=+-sqrt(b^2/2+f^2/2-(b+f)((z+ft)/t)+((z+ft)/t)^2) + (z+ft)/t 
 
 computing acceleration from above: 
 &gt;&gt;&gt; a = (m-b + m-f)/t = (2m-b-f)/t 
 example continuing last example from above: (2*5-1--1)/5 = 2, which agrees with above 
 
 example:b=1, f=-1, m=5, a=2: t1=2, t2=3;z=2(1+5)/2 + 3(5+-1)/2 - -5 =17 
 m=sqrt(1/2 + 1/2 - 0 + ((17+-5)/5)^2) + (17+-5)/5 = sqrt(1 - 0 + 5.76) + 2.4 = 2.6 + 2.4 = 5 
 
 if continuous acceleration between begVel and finalVel (z=t(b+f)/2), then maxvel will be max of begVel or finalVel 
 (does NOT take into account the distance traveled while the move on) 
 example:b=2, f=4, m=3 (pick a point on a line between begVel and finalVel), a=1: t1=1, t2=2; z=6 
 m=sqrt(2+8-6*3+9)+3=4 (which is max of b and f) 
 
 if m <member name="T:ScopeIII.Coordinates.ConvertMatrix"><summary>
 Coordinate translation routines using Taki's matrix method. 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	3/8/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertMatrix.InitMatrix(System.Int32)"><summary>
 to use, put values to init into current, then call initMatrix(x) with x = desired init 
 function performs all possible inits from the beginning: for example, need only call initMatrix(1) once 
 to also init two and three 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	2/22/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertMatrix.subrS(System.Double,System.Double,System.Double,System.Double)"><summary>
 per Taki's eq 5.3-4 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/22/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertMatrix.subrB(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
 per Taki's eq 5.3-2 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/22/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertMatrix.subrT(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
 per Taki's eq 5.3-5/6 (Taki says 2 loops sufficient for z errors of 1 deg), 
 FabErrors.Z1.rad=1, FabErrors.Z2.rad=-1, faberrors.z3=1, alt/az=88/100 loops needed 6 FabErrors.Z1.rad=2, FabErrors.Z2.rad=-2, faberrors.z3=0, alt/az=90/100 loops needed 22 
 will not converge if .dec or .alt = 90 deg and FabErrors.Z1.rad2 non-zero and equat init adopted (could be because of poor initial guess by subrB()) 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/22/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertMatrix.subrU(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
 use apparent alt derivation from Larry Bell, apparent az from Taki's iterative solution 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/22/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertMatrix.getApparentAlt(System.Double,System.Double,System.Double,System.Double)"><summary>
 per Larry Bell's derivation 
 FabErrors.Z1.rad rotation done between alt and az rotations so no closed algebraic solution, instead, search iteratively 
 '_h' is alt, '_f' is az 
 apparent coordinates are what the encoders see, and are our goal 
 </summary>
 <param name="cosz1" />
 <param name="cosz2" />
 <param name="sinz1" />
 <param name="sinz2" />
 <returns />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/22/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertMatrix.subrL(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><summary>
 from Larry Bell's derivation of iterative solution to FabErrors.Z1.radfaberror.z2 
 </summary>
 <param name="cosF" />
 <param name="cosH" />
 <param name="sinF" />
 <param name="sinH" />
 <param name="cosz1" />
 <param name="cosz2" />
 <param name="sinz1" />
 <param name="sinz2" />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/22/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertMatrix.subrSwitcher"><summary>
 '_h' is alt, '_f' is az 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/22/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.ConvertTrig"><summary>
 Coordinate translation using standard spherical trig equations. 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	4/25/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertTrig.GetAltaz"><summary>
 set site latitude, position ra, dec, sidT before calling; 
 see notes for CoordXformBase: if southern hemisphere, then flip dec bef. calc, 
 then flip az after: necessary to conform to coordinate scheme for southern hemisphere 
 
 </summary>
 <returns />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	2/27/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.ConvertTrig.GetEquat"><summary>
 set site latitude, position alt, az, and sidT before calling; 
 see notes for CoordXformBase: if southern hemisphere, then flip az bef. calc, 
 then flip dec after: necessary to conform to coordinate scheme for southern hemisphere 
 
 </summary>
 <returns />
 <remarks>
     ''' </remarks>
 <history>
 	[MBartels]	2/20/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.CoordXformBase"><summary>
 
 Hour angle increases to the east in the direction of rising stars, as does Right Ascension; 
 Hour Angle offset = Local Sidereal time - scope's meridian; 
 scope's meridian = ra - ha; 
 haOff = LST - ra - ha, ha = LST - ra - haOff, ha + haOff = LST - ra; 
 (+) HA = scope aimed to East, (-) HA = scope aimed to West; 
 (+) offset = scope tilted to West, (-) offset = scope tilted to East; 
 ex: scope tilted 1 hr east of meridian (haOff = -1 hr), HA = 2 hrs: 
     ha + haOff = LST - ra, 2 + -1 = LST - ra, 1 = LST - ra: actual or net HA = 1; 
 
 Defined alignments for ConvertMatrix (altaz and equat): 
 1st point: scope's celestial pole (faces north in northern hemisphere, faces south 
     in southern hemisphere) 
 2nd point: intersection of celestial equator and meridian (faces south in northern 
     hemisphere, faces north in southern hemisphere) 
 
 Coordinate Rules (consequences of the defined alignments, to be applied to all coordinate conversions): 
     alt increases from horizon to zenith; 
     az always increases clockwise (position your body along the pole with head 
         pointed upward, sweep arms from left to right clockwise); 
     az of 0 always points towards Earth's closest pole, az of 180 points to Earth's equator; 
     tracking motion causes az to reverse direction in southern hemisphere as compared 
         to northern hemisphere; 
 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	4/25/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.FieldRotation.CalcRateSidTrackViaFormula(ScopeIII.Coordinates.Position@,System.Double,ScopeIII.Coordinates.Coordinate@)"><summary>
 note: these two CalcFieldRotationRate functions match with large hour angle offsets of the scope's zenith and very high altitude 
 angles if latitude is found by pointing at scope's zenith as opposed to pointing at scope's equatorial pole 
 
 From: "MLThiebaux" <member name="M:ScopeIII.Coordinates.FieldRotation.getFieldRotationRate(ScopeIII.Coordinates.Position@)"><summary>
 rate of field rotation in radians per minute: calculates rate based on last two calls to CalcAngleViaTrig(), 
 assuming that sidT has changed between calls, rate can exceed 360deg/min, though it cannot be sustained for the minute 
 </summary>
 <returns />
 <remarks>
 </remarks>
 <history>
 	[mbartels]	3/1/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.FieldRotation.CalcRateSidTrackViaDeltaFR(ScopeIII.Coordinates.Position@,System.Double,ScopeIII.Coordinates.Coordinate@)"><summary>
 calculate the field rotation rate by dividing the field rotation angle difference obtained by calculating the 
 field rotation angle just before and just after the desired time 
 </summary>
 <param name="position" />
 <param name="haOff" />
 <param name="equatorialLatitude" />
 <returns />
 <remarks>
 </remarks>
 <history>
 	[mbartels]	3/1/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.InitStateFactory.Build(ScopeIII.Common.ISFT@,ScopeIII.Common.ISFT@)"><summary>
 Build InitStateTemplate based on final strong types. 
 </summary>
 <param name="CoordXformType" />
 <param name="InitStateType" />
 <returns />
 <remarks>
 </remarks>
 <history>
 	[mbartels]	12/21/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.InitStateFactory.SetInit(ScopeIII.Coordinates.InitStateTemplate@,ScopeIII.Common.ISFT@)"><summary>
  set InitStateTemplate's IInit based on InitStateType, eg, InitStateType.Equatorial, InitStateType.Altazimuth 
 </summary>
 <param name="InitStateTemplate" />
 <param name="InitStateType" />
 <remarks>
 </remarks>
 <history>
 	[mbartels]	12/21/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.IterativeLatitude"><summary>
 Iterate for Latitude using the equat coord for 2 positions. 
 
 When the alt diff and the az diff of the resulting GetAltaz agree closest to the 
 alt diff and az diff of the given 2 positions, then Latitude is found. 
 
 Use az diff first to pin down hemisphere, then average w/ alt diff. 
 
 Required parameters are 2 positions with altaz/equat/sidT values present. 
 
 Independent of coordinate transform method. 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	3/2/2005	Created 
 </history></member><member name="T:ScopeIII.Coordinates.PostInitCalcs"><summary>
 Calculate various post initialization variables. 
 Independent of coordinate transform method. 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	4/25/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.PostInitCalcs.calcPostInitVars"><summary>
 can be called after initialization: 
 calculates apparent scope latitude (from two perspectives), longitude, offset hour angle, offset azimuth, 
 zenith and polar offsets 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	2/23/2005	Created 
 </history></member><member name="M:ScopeIII.Coordinates.PostInitCalcs.calcPostInitVarsForFieldRotationOnly"><summary>
 shortened version of calcPostInitVars() that runs must faster 
 use when only variables for field rotation calculation are needed 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	2/25/2005	Created 
 </history></member></summary></member></summary></member></summary></member></summary>
    </member>
  </members>
</doc>
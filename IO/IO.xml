<?xml version="1.0"?>
<doc>
  <assembly>
    <name>IO</name>
    <version>1.0.2412.33923</version>
    <fullname>IO, Version=1.0.2412.33923, Culture=neutral, PublicKeyToken=null</fullname>
  </assembly>
  <members>
    <member name="T:ScopeIII.IO.CommBaseSettingsFacade">
      <summary>
 CommBaseSettingsFacade encapsulates a CommSettings (which inherits from JH.CommBase.CommBase.CommBaseSettings). 
 CommBaseSettingsFacade encapsulates CommPortSettingsToPropGridAdapter. 
 This adapts the settings to the property grid, and includes a PropertyChanged event. 
 Use the adapter by setting the property grid’s selected object to CommBaseSettingsFacade.ISettingsToPropGridAdapter. 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	9/8/2005	Created 
 </history></member>
    <member name="T:ScopeIII.IO.CommPort">
      <summary>
 Comm Port notes 
 
 Uses NETSerialComm with namespace JH.CommBase 
 CommBase class must be inherited.  This class, CommPort, does this. 
 This class implements and overrides protected base methods CommSettings() As CommBaseSettings, 
 and OnRxChar(ByVal b As Byte). 
 In addition, protected CommBase.Send(…) needs to be wrapped with public method. 
 
 JH.CommBase.CommBase contains JH.CommBase.CommBase.CommBaseSettings, which is called 
 during JH.CommBase.CommBase.Open().  CommSettings(), as noted above, is overridden to 
 return a CommBaseSettings object during the Open. 
 
 Settings is set just prior to the call to JH.CommBase.CommBase.Open(). 
 This occurs in CommPortFacade, which contains CommPort (this class). 
 CommPortFacade sets CommPort's Settings() As JH.CommBase.CommBase.CommBaseSettings to 
 its ISettingsFacade.ISettings. 
 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	9/8/2005	Created 
 </history></member>
    <member name="T:ScopeIII.IO.IIO">
      <summary>
 Interface for all IO, where implementations include CommPortFacade, TCPserverFacade, and TCPclientFacade. 
 Settings are stored in and retrieved from a ISettingsFacade.  This allows settings to be manipulated 
 in an independent manner. 
 PortName is used as the unique IO channel identifier.  Trace files use PortName. 
 SettingsName is the key name to retrieve and save settings from the configuration. 
 LoadSettings attempts to load from configuration.  If not found, programmed default values are used. 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	9/8/2005	Created 
 </history></member>
    <member name="T:ScopeIII.IO.IPsettings">
      <summary>
 Class holding an IP address and port number. 
 Cannot use IPEndPoint and IPAddress directly as they do not have default constructors, 
 causing reflection to fail during the configuration manager's save. 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[mbartels]	8/18/2005	Created 
 </history></member>
    <member name="M:ScopeIII.IO.ReceiveInspector.Inspect(System.Int32,System.Boolean,System.Byte,System.Double)">
      <summary>
 Read is 'finished' when: 
     1) desired # of bytes read (if unknown # of bytes, set parameter to Int32.MaxValue) 
     2) eod char encountered (if eod char passed in as nothing, byte value will be 0) 
     3) timed out 
 
 Observers of ReceiveInspector given whatever bytes were received., 
 Results should be inspected by State and BytesRead properties. 
 </summary>
 <param name="bytesToRead" />
 <param name="endOfReceiveByte" />
 <param name="waitMilliSeconds" />
 <remarks>
 </remarks>
 <history>
 	[MBartels]	1/1/2006	Created 
 </history></member>
    <member name="M:ScopeIII.IO.PreLoadConfig.IncludeTypes">
      <summary>
 include types before serialize/deserialize that occurs in load/save 
 </summary>
 <returns />
 <remarks>
 </remarks>
 <history>
 	[mbartels]	8/11/2005	Created 
 </history></member>
  </members>
</doc>